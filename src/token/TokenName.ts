import { TokenType } from './TokenType';

export const TokenName: Map<TokenType, string> = new Map([
  [TokenType.ARROW, '=>'],
  [TokenType.AS, 'as'],
  [TokenType.ASSIGN, '='],
  [TokenType.ASYNC, 'async'],
  [TokenType.AWAIT, 'await'],
  [TokenType.BINARY_LITERAL, 'literal'],
  [TokenType.BITWISE_AND, '&'],
  [TokenType.BITWISE_AND_ASSIGN, '&='],
  [TokenType.BITWISE_LOGICAL_SHIFT_TO_RIGHT, '>>>'],
  [TokenType.BITWISE_LOGICAL_SHIFT_TO_RIGHT_ASSIGN, '>>>='],
  [TokenType.BITWISE_NOT, '~'],
  [TokenType.BITWISE_OR, '|'],
  [TokenType.BITWISE_OR_ASSIGN, '|='],
  [TokenType.BITWISE_SHIFT_TO_LEFT, '<<'],
  [TokenType.BITWISE_SHIFT_TO_LEFT_ASSIGN, '<<='],
  [TokenType.BITWISE_SHIFT_TO_RIGHT, '>>'],
  [TokenType.BITWISE_SHIFT_TO_RIGHT_ASSIGN, '>>='],
  [TokenType.BITWISE_XOR, '^'],
  [TokenType.BITWISE_XOR_ASSIGN, '^='],
  [TokenType.BOOLEAN_LITERAL, 'literal'],
  [TokenType.BREAK, 'break'],
  [TokenType.CASE, 'case'],
  [TokenType.CATCH, 'catch'],
  [TokenType.CLASS, 'class'],
  [TokenType.COLON, ':'],
  [TokenType.COMMA, ','],
  [TokenType.CONST, 'const'],
  [TokenType.CONTINUE, 'continue'],
  [TokenType.DEBUGGER, 'debugger'],
  [TokenType.DECIMAL_LITERAL, 'literal'],
  [TokenType.DEFAULT, 'default'],
  [TokenType.DELETE, 'delete'],
  [TokenType.DIVIDE, '/'],
  [TokenType.DIVIDE_ASSIGN, '/='],
  [TokenType.DO, 'do'],
  [TokenType.DOT, '.'],
  [TokenType.ELLIPSIS, '...'],
  [TokenType.ELSE, 'else'],
  [TokenType.ENUM, 'enum'],
  [TokenType.EOF, 'end-of-file'],
  [TokenType.EQUAL, '=='],
  [TokenType.EXPONENTIATION, '**'],
  [TokenType.EXPONENTIATION_ASSIGN, '**='],
  [TokenType.EXPORT, 'export'],
  [TokenType.EXTENDS, 'extends'],
  [TokenType.FINALLY, 'finally'],
  [TokenType.FOR, 'for'],
  [TokenType.FROM, 'from'],
  [TokenType.FUNCTION, 'function'],
  [TokenType.GET, 'get'],
  [TokenType.GREATER_THAN, '>'],
  [TokenType.GREATER_THAN_OR_EQUAL, '>='],
  [TokenType.HEXADECIMAL_LITERAL, 'literal'],
  [TokenType.IDENTIFIER, 'identifier'],
  [TokenType.IF, 'if'],
  [TokenType.IMPLEMENTS, 'implements'],
  [TokenType.IMPORT, 'import'],
  [TokenType.IN, 'in'],
  [TokenType.INSTANCE_OF, 'instanceof'],
  [TokenType.INTERFACE, 'interface'],
  [TokenType.LEFT_CURLY_BRACES, '{'],
  [TokenType.LEFT_PARENTHESIS, '('],
  [TokenType.LEFT_SQUARE_BRACKETS, '['],
  [TokenType.LESS_THAN, '<'],
  [TokenType.LESS_THAN_OR_EQUAL, '<='],
  [TokenType.LET, 'let'],
  [TokenType.LOGICAL_AND, '&&'],
  [TokenType.LOGICAL_NOT, '!'],
  [TokenType.LOGICAL_OR, '||'],
  [TokenType.MINUS, '-'],
  [TokenType.MINUS_ASSIGN, '-='],
  [TokenType.MINUS_MINUS, '--'],
  [TokenType.MODULUS, '%'],
  [TokenType.MODULUS_ASSIGN, '%='],
  [TokenType.MULTIPLY, '*'],
  [TokenType.MULTIPLY_ASSIGN, '*='],
  [TokenType.NEW, 'new'],
  [TokenType.NOT_EQUAL, '!='],
  [TokenType.NOT_STRICT_EQUAL, '!=='],
  [TokenType.NULL_LITERAL, 'literal'],
  [TokenType.OCTAL_LITERAL, 'literal'],
  [TokenType.PACKAGE, 'package'],
  [TokenType.PLUS, '+'],
  [TokenType.PLUS_ASSIGN, '+='],
  [TokenType.PLUS_PLUS, '++'],
  [TokenType.PRINT, 'print'],
  [TokenType.PRIVATE, 'private'],
  [TokenType.PROTECTED, 'protected'],
  [TokenType.PUBLIC, 'public'],
  [TokenType.QUESTION_MARK, '?'],
  [TokenType.RETURN, 'return'],
  [TokenType.RIGHT_CURLY_BRACES, '}'],
  [TokenType.RIGHT_PARENTHESIS, ')'],
  [TokenType.RIGHT_SQUARE_BRACKETS, ']'],
  [TokenType.SEMICOLON, ';'],
  [TokenType.SET, 'set'],
  [TokenType.STATIC, 'static'],
  [TokenType.STRICT_EQUAL, '==='],
  [TokenType.STRING_LITERAL, 'literal'],
  [TokenType.SUPER, 'super'],
  [TokenType.SWITCH, 'switch'],
  [TokenType.THIS, 'this'],
  [TokenType.THROW, 'throw'],
  [TokenType.TRY, 'try'],
  [TokenType.TYPE_OF, 'typeof'],
  [TokenType.VAR, 'var'],
  [TokenType.VOID, 'void'],
  [TokenType.WHILE, 'while'],
  [TokenType.WITH, 'with'],
  [TokenType.YIELD, 'yield']
]);
