import { Token } from "../token/Token";
import { TokenType } from "../token/TokenType";

export const KEYWORDS = new Map<string, Token>([
  ["as", new Token(TokenType.AS, "as")],
  ["async", new Token(TokenType.ASYNC, "async")],
  ["await", new Token(TokenType.AWAIT, "await")],
  ["break", new Token(TokenType.BREAK, "break")],
  ["case", new Token(TokenType.CASE, "case")],
  ["catch", new Token(TokenType.CATCH, "catch")],
  ["class", new Token(TokenType.CLASS, "class")],
  ["const", new Token(TokenType.CONST, "const")],
  ["continue", new Token(TokenType.CONTINUE, "continue")],
  ["debugger", new Token(TokenType.DEBUGGER, "debugger")],
  ["default", new Token(TokenType.DEFAULT, "default")],
  ["delete", new Token(TokenType.DELETE, "delete")],
  ["do", new Token(TokenType.DO, "do")],
  ["else", new Token(TokenType.ELSE, "else")],
  ["enum", new Token(TokenType.ENUM, "enum")],
  ["export", new Token(TokenType.EXPORT, "export")],
  ["extends", new Token(TokenType.EXTENDS, "extends")],
  ["false", new Token(TokenType.BOOLEAN_LITERAL, "false")],
  ["finally", new Token(TokenType.FINALLY, "finally")],
  ["for", new Token(TokenType.FOR, "for")],
  ["from", new Token(TokenType.FROM, "from")],
  ["function", new Token(TokenType.FUNCTION, "function")],
  ["get", new Token(TokenType.GET, "get")],
  ["if", new Token(TokenType.IF, "if")],
  ["implements", new Token(TokenType.IMPLEMENTS, "implements")],
  ["import", new Token(TokenType.IMPORT, "import")],
  ["in", new Token(TokenType.IN, "in")],
  ["instanceof", new Token(TokenType.INSTANCE_OF, "instanceof")],
  ["interface", new Token(TokenType.INTERFACE, "interface")],
  ["let", new Token(TokenType.LET, "let")],
  ["new", new Token(TokenType.NEW, "new")],
  ["null", new Token(TokenType.NULL_LITERAL, "null")],
  ["package", new Token(TokenType.PACKAGE, "package")],
  ["private", new Token(TokenType.PRIVATE, "private")],
  ["protected", new Token(TokenType.PROTECTED, "protected")],
  ["public", new Token(TokenType.PUBLIC, "public")],
  ["return", new Token(TokenType.RETURN, "return")],
  ["set", new Token(TokenType.SET, "set")],
  ["static", new Token(TokenType.STATIC, "static")],
  ["super", new Token(TokenType.SUPER, "super")],
  ["switch", new Token(TokenType.SWITCH, "switch")],
  ["this", new Token(TokenType.THIS, "this")],
  ["throw", new Token(TokenType.THROW, "throw")],
  ["true", new Token(TokenType.BOOLEAN_LITERAL, "true")],
  ["try", new Token(TokenType.TRY, "try")],
  ["typeof", new Token(TokenType.TYPE_OF, "typeof")],
  ["var", new Token(TokenType.VAR, "var")],
  ["void", new Token(TokenType.VOID, "void")],
  ["while", new Token(TokenType.WHILE, "while")],
  ["with", new Token(TokenType.WITH, "with")],
  ["yield", new Token(TokenType.YIELD, "yield")],
]);
